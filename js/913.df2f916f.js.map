{"version":3,"file":"js/913.df2f916f.js","mappings":"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","sources":["webpack://comprar-bem/./src/services/exportService.js"],"sourcesContent":["/**\r\n * Serviço para exportação de dados em diferentes formatos\r\n */\r\n\r\n// Função para exportar dados para CSV\r\nexport function exportToCSV(data, filename = 'export.csv', headers = null) {\r\n  if (!data || data.length === 0) {\r\n    throw new Error('Nenhum dado para exportar')\r\n  }\r\n\r\n  // Se não foram fornecidos headers, usar as chaves do primeiro objeto\r\n  const csvHeaders = headers || Object.keys(data[0])\r\n  \r\n  // Criar cabeçalho CSV\r\n  let csvContent = csvHeaders.join(';') + '\\n'\r\n  \r\n  // Adicionar dados\r\n  data.forEach(row => {\r\n    const values = csvHeaders.map(header => {\r\n      let value = row[header] || ''\r\n      \r\n      // Tratar valores especiais\r\n      if (typeof value === 'string') {\r\n        // Escapar aspas duplas e quebras de linha\r\n        value = value.replace(/\"/g, '\"\"')\r\n        // Se contém vírgula, ponto e vírgula ou quebra de linha, envolver em aspas\r\n        if (value.includes(';') || value.includes(',') || value.includes('\\n') || value.includes('\"')) {\r\n          value = `\"${value}\"`\r\n        }\r\n      } else if (value instanceof Date) {\r\n        value = value.toLocaleDateString('pt-BR')\r\n      } else if (typeof value === 'number') {\r\n        // Formatar números com vírgula decimal para padrão brasileiro\r\n        value = value.toLocaleString('pt-BR')\r\n      }\r\n      \r\n      return value\r\n    })\r\n    csvContent += values.join(';') + '\\n'\r\n  })\r\n  \r\n  // Criar e baixar arquivo\r\n  downloadFile(csvContent, filename, 'text/csv;charset=utf-8;')\r\n}\r\n\r\n// Função para exportar dados para Excel (formato CSV que o Excel entende)\r\nexport function exportToExcel(data, filename = 'export.xlsx', headers = null) {\r\n  if (!data || data.length === 0) {\r\n    throw new Error('Nenhum dado para exportar')\r\n  }\r\n\r\n  // Preparar dados para Excel\r\n  const excelHeaders = headers || Object.keys(data[0])\r\n  \r\n  // Criar conteúdo Excel (CSV com separador correto)\r\n  let excelContent = '\\uFEFF' // BOM para UTF-8\r\n  excelContent += excelHeaders.join('\\t') + '\\n'\r\n  \r\n  data.forEach(row => {\r\n    const values = excelHeaders.map(header => {\r\n      let value = row[header] || ''\r\n      \r\n      if (typeof value === 'string') {\r\n        // Limpar quebras de linha para Excel\r\n        value = value.replace(/\\n/g, ' ')\r\n      } else if (value instanceof Date) {\r\n        value = value.toLocaleDateString('pt-BR')\r\n      } else if (typeof value === 'number') {\r\n        // Manter números como estão para o Excel processar corretamente\r\n        value = value.toString().replace('.', ',')\r\n      }\r\n      \r\n      return value\r\n    })\r\n    excelContent += values.join('\\t') + '\\n'\r\n  })\r\n  \r\n  // Baixar como arquivo Excel\r\n  downloadFile(excelContent, filename.replace('.xlsx', '.xls'), 'application/vnd.ms-excel;charset=utf-8;')\r\n}\r\n\r\n// Função para criar e baixar arquivo\r\nfunction downloadFile(content, filename, mimeType) {\r\n  const blob = new Blob([content], { type: mimeType })\r\n  const url = window.URL.createObjectURL(blob)\r\n  \r\n  const link = document.createElement('a')\r\n  link.href = url\r\n  link.download = filename\r\n  link.style.display = 'none'\r\n  \r\n  document.body.appendChild(link)\r\n  link.click()\r\n  document.body.removeChild(link)\r\n  \r\n  // Limpar URL objeto\r\n  setTimeout(() => {\r\n    window.URL.revokeObjectURL(url)\r\n  }, 100)\r\n}\r\n\r\n// Função específica para exportar cotações\r\nexport function exportCotacoes(cotacoes, formato = 'excel') {\r\n  if (!cotacoes || cotacoes.length === 0) {\r\n    throw new Error('Nenhuma cotação para exportar')\r\n  }\r\n\r\n  // Headers customizados para cotações\r\n  const headers = [\r\n    'produto_nome',\r\n    'produto_descricao', \r\n    'fornecedor_nome',\r\n    'fornecedor_cnpj',\r\n    'fornecedor_contato',\r\n    'quantidade',\r\n    'unidade_medida',\r\n    'preco_unitario',\r\n    'preco_total',\r\n    'prazo_entrega',\r\n    'data_validade',\r\n    'observacoes',\r\n    'status',\r\n    'created_at'\r\n  ]\r\n\r\n  // Headers legíveis para exportação\r\n  const headersLegiveis = [\r\n    'Produto',\r\n    'Descrição do Produto',\r\n    'Fornecedor', \r\n    'CNPJ',\r\n    'Contato',\r\n    'Quantidade',\r\n    'Unidade',\r\n    'Preço Unitário (R$)',\r\n    'Preço Total (R$)',\r\n    'Prazo Entrega (dias)',\r\n    'Data Validade',\r\n    'Observações',\r\n    'Status',\r\n    'Data Criação'\r\n  ]\r\n\r\n  // Preparar dados formatados\r\n  const dadosFormatados = cotacoes.map(cotacao => {\r\n    return {\r\n      'Produto': cotacao.produto_nome || '',\r\n      'Descrição do Produto': cotacao.produto_descricao || '',\r\n      'Fornecedor': cotacao.fornecedor_nome || '',\r\n      'CNPJ': formatCNPJ(cotacao.fornecedor_cnpj) || '',\r\n      'Contato': cotacao.fornecedor_contato || '',\r\n      'Quantidade': cotacao.quantidade || '',\r\n      'Unidade': cotacao.unidade_medida || '',\r\n      'Preço Unitário (R$)': formatCurrency(cotacao.preco_unitario) || '',\r\n      'Preço Total (R$)': formatCurrency(cotacao.preco_total) || '',\r\n      'Prazo Entrega (dias)': cotacao.prazo_entrega || '',\r\n      'Data Validade': formatDate(cotacao.data_validade) || '',\r\n      'Observações': cotacao.observacoes || '',\r\n      'Status': getStatusLabel(cotacao.status) || '',\r\n      'Data Criação': formatDate(cotacao.created_at) || ''\r\n    }\r\n  })\r\n\r\n  // Gerar nome do arquivo com data atual\r\n  const agora = new Date()\r\n  const dataFormatada = agora.toISOString().split('T')[0] // YYYY-MM-DD\r\n  const horaFormatada = agora.toTimeString().split(' ')[0].replace(/:/g, '-') // HH-MM-SS\r\n  \r\n  if (formato === 'excel') {\r\n    const filename = `cotacoes_${dataFormatada}_${horaFormatada}.xlsx`\r\n    exportToExcel(dadosFormatados, filename, headersLegiveis)\r\n  } else {\r\n    const filename = `cotacoes_${dataFormatada}_${horaFormatada}.csv`\r\n    exportToCSV(dadosFormatados, filename, headersLegiveis)\r\n  }\r\n}\r\n\r\n// Funções auxiliares de formatação\r\nfunction formatCurrency(value) {\r\n  if (!value) return ''\r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL'\r\n  }).format(value)\r\n}\r\n\r\nfunction formatCNPJ(cnpj) {\r\n  if (!cnpj) return ''\r\n  return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, '$1.$2.$3/$4-$5')\r\n}\r\n\r\nfunction formatDate(date) {\r\n  if (!date) return ''\r\n  return new Date(date).toLocaleDateString('pt-BR')\r\n}\r\n\r\nfunction getStatusLabel(status) {\r\n  const statusLabels = {\r\n    pendente: 'Pendente',\r\n    enviada: 'Enviada',\r\n    respondida: 'Respondida',\r\n    aceita: 'Aceita',\r\n    rejeitada: 'Rejeitada',\r\n    expirada: 'Expirada'\r\n  }\r\n  return statusLabels[status] || status\r\n}\r\n\r\n// Função específica para exportar comparativos\r\nexport function exportComparativos(comparativos, formato = 'excel') {\r\n  if (!comparativos || comparativos.length === 0) {\r\n    throw new Error('Nenhum comparativo para exportar')\r\n  }\r\n\r\n  // Preparar dados formatados para comparativos\r\n  const dadosFormatados = comparativos.map(comp => {\r\n    return {\r\n      'Título': comp.titulo || '',\r\n      'Descrição': comp.descricao || '',\r\n      'Categoria': comp.categoria || '',\r\n      'Status': getStatusLabel(comp.status) || '',\r\n      'Total de Itens': comp.total_itens || 0,\r\n      'Pontuação Máxima': comp.pontuacao_maxima || 0,\r\n      'Fornecedor Vencedor': comp.fornecedor_vencedor || '',\r\n      'Economia Estimada (R$)': formatCurrency(comp.economia_estimada) || '',\r\n      'Data Criação': formatDate(comp.created_at) || '',\r\n      'Última Atualização': formatDate(comp.updated_at) || ''\r\n    }\r\n  })\r\n\r\n  const agora = new Date()\r\n  const dataFormatada = agora.toISOString().split('T')[0]\r\n  const horaFormatada = agora.toTimeString().split(' ')[0].replace(/:/g, '-')\r\n  \r\n  if (formato === 'excel') {\r\n    const filename = `comparativos_${dataFormatada}_${horaFormatada}.xlsx`\r\n    exportToExcel(dadosFormatados, filename)\r\n  } else {\r\n    const filename = `comparativos_${dataFormatada}_${horaFormatada}.csv`\r\n    exportToCSV(dadosFormatados, filename)\r\n  }\r\n}\r\n\r\n// Função específica para exportar análises de preços\r\nexport function exportAnalises(analises, formato = 'excel') {\r\n  if (!analises || analises.length === 0) {\r\n    throw new Error('Nenhuma análise para exportar')\r\n  }\r\n\r\n  // Preparar dados formatados para análises\r\n  const dadosFormatados = analises.map(analise => {\r\n    return {\r\n      'Título': analise.titulo || '',\r\n      'Categoria': analise.categoria || '',\r\n      'Status': getStatusLabel(analise.status) || '',\r\n      'Produtos Analisados': analise.produtos_analisados || 0,\r\n      'Preço Médio (R$)': formatCurrency(analise.preco_medio) || '',\r\n      'Menor Preço (R$)': formatCurrency(analise.preco_minimo) || '',\r\n      'Maior Preço (R$)': formatCurrency(analise.preco_maximo) || '',\r\n      'Desvio Padrão': analise.desvio_padrao || '',\r\n      'Outliers Detectados': analise.outliers_detectados || 0,\r\n      'Recomendação': analise.recomendacao || '',\r\n      'Data Criação': formatDate(analise.created_at) || '',\r\n      'Última Atualização': formatDate(analise.updated_at) || ''\r\n    }\r\n  })\r\n\r\n  const agora = new Date()\r\n  const dataFormatada = agora.toISOString().split('T')[0]\r\n  const horaFormatada = agora.toTimeString().split(' ')[0].replace(/:/g, '-')\r\n  \r\n  if (formato === 'excel') {\r\n    const filename = `analises_precos_${dataFormatada}_${horaFormatada}.xlsx`\r\n    exportToExcel(dadosFormatados, filename)\r\n  } else {\r\n    const filename = `analises_precos_${dataFormatada}_${horaFormatada}.csv`\r\n    exportToCSV(dadosFormatados, filename)\r\n  }\r\n}"],"names":["exportToCSV","data","filename","headers","length","Error","csvHeaders","Object","keys","csvContent","join","forEach","row","values","map","header","value","replace","includes","Date","toLocaleDateString","toLocaleString","downloadFile","exportToExcel","excelHeaders","excelContent","toString","content","mimeType","blob","Blob","type","url","window","URL","createObjectURL","link","document","createElement","href","download","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","exportCotacoes","cotacoes","formato","headersLegiveis","dadosFormatados","cotacao","produto_nome","produto_descricao","fornecedor_nome","formatCNPJ","fornecedor_cnpj","fornecedor_contato","quantidade","unidade_medida","formatCurrency","preco_unitario","preco_total","prazo_entrega","formatDate","data_validade","observacoes","getStatusLabel","status","created_at","agora","dataFormatada","toISOString","split","horaFormatada","toTimeString","Intl","NumberFormat","currency","format","cnpj","date","statusLabels","pendente","enviada","respondida","aceita","rejeitada","expirada","exportComparativos","comparativos","comp","titulo","descricao","categoria","total_itens","pontuacao_maxima","fornecedor_vencedor","economia_estimada","updated_at","exportAnalises","analises","analise","produtos_analisados","preco_medio","preco_minimo","preco_maximo","desvio_padrao","outliers_detectados","recomendacao"],"sourceRoot":""}